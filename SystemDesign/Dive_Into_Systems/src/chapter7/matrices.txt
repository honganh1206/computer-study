
matrices:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 82 2f 00 00    	push   0x2f82(%rip)        # 3fa8 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 83 2f 00 00 	bnd jmp *0x2f83(%rip)        # 3fb0 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    106f:	90                   	nop

Disassembly of section .plt.got:

0000000000001070 <__cxa_finalize@plt>:
    1070:	f3 0f 1e fa          	endbr64 
    1074:	f2 ff 25 7d 2f 00 00 	bnd jmp *0x2f7d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001080 <puts@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 2d 2f 00 00 	bnd jmp *0x2f2d(%rip)        # 3fb8 <puts@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001090 <printf@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 25 2f 00 00 	bnd jmp *0x2f25(%rip)        # 3fc0 <printf@GLIBC_2.2.5>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010a0 <malloc@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 1d 2f 00 00 	bnd jmp *0x2f1d(%rip)        # 3fc8 <malloc@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000010b0 <exit@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 15 2f 00 00 	bnd jmp *0x2f15(%rip)        # 3fd0 <exit@GLIBC_2.2.5>
    10bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010c0 <_start>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	31 ed                	xor    %ebp,%ebp
    10c6:	49 89 d1             	mov    %rdx,%r9
    10c9:	5e                   	pop    %rsi
    10ca:	48 89 e2             	mov    %rsp,%rdx
    10cd:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    10d1:	50                   	push   %rax
    10d2:	54                   	push   %rsp
    10d3:	45 31 c0             	xor    %r8d,%r8d
    10d6:	31 c9                	xor    %ecx,%ecx
    10d8:	48 8d 3d 96 01 00 00 	lea    0x196(%rip),%rdi        # 1275 <main>
    10df:	ff 15 f3 2e 00 00    	call   *0x2ef3(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.34>
    10e5:	f4                   	hlt    
    10e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    10ed:	00 00 00 

00000000000010f0 <deregister_tm_clones>:
    10f0:	48 8d 3d 19 2f 00 00 	lea    0x2f19(%rip),%rdi        # 4010 <__TMC_END__>
    10f7:	48 8d 05 12 2f 00 00 	lea    0x2f12(%rip),%rax        # 4010 <__TMC_END__>
    10fe:	48 39 f8             	cmp    %rdi,%rax
    1101:	74 15                	je     1118 <deregister_tm_clones+0x28>
    1103:	48 8b 05 d6 2e 00 00 	mov    0x2ed6(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    110a:	48 85 c0             	test   %rax,%rax
    110d:	74 09                	je     1118 <deregister_tm_clones+0x28>
    110f:	ff e0                	jmp    *%rax
    1111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1118:	c3                   	ret    
    1119:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001120 <register_tm_clones>:
    1120:	48 8d 3d e9 2e 00 00 	lea    0x2ee9(%rip),%rdi        # 4010 <__TMC_END__>
    1127:	48 8d 35 e2 2e 00 00 	lea    0x2ee2(%rip),%rsi        # 4010 <__TMC_END__>
    112e:	48 29 fe             	sub    %rdi,%rsi
    1131:	48 89 f0             	mov    %rsi,%rax
    1134:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1138:	48 c1 f8 03          	sar    $0x3,%rax
    113c:	48 01 c6             	add    %rax,%rsi
    113f:	48 d1 fe             	sar    %rsi
    1142:	74 14                	je     1158 <register_tm_clones+0x38>
    1144:	48 8b 05 a5 2e 00 00 	mov    0x2ea5(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable@Base>
    114b:	48 85 c0             	test   %rax,%rax
    114e:	74 08                	je     1158 <register_tm_clones+0x38>
    1150:	ff e0                	jmp    *%rax
    1152:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1158:	c3                   	ret    
    1159:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001160 <__do_global_dtors_aux>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	80 3d a5 2e 00 00 00 	cmpb   $0x0,0x2ea5(%rip)        # 4010 <__TMC_END__>
    116b:	75 2b                	jne    1198 <__do_global_dtors_aux+0x38>
    116d:	55                   	push   %rbp
    116e:	48 83 3d 82 2e 00 00 	cmpq   $0x0,0x2e82(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1175:	00 
    1176:	48 89 e5             	mov    %rsp,%rbp
    1179:	74 0c                	je     1187 <__do_global_dtors_aux+0x27>
    117b:	48 8b 3d 86 2e 00 00 	mov    0x2e86(%rip),%rdi        # 4008 <__dso_handle>
    1182:	e8 e9 fe ff ff       	call   1070 <__cxa_finalize@plt>
    1187:	e8 64 ff ff ff       	call   10f0 <deregister_tm_clones>
    118c:	c6 05 7d 2e 00 00 01 	movb   $0x1,0x2e7d(%rip)        # 4010 <__TMC_END__>
    1193:	5d                   	pop    %rbp
    1194:	c3                   	ret    
    1195:	0f 1f 00             	nopl   (%rax)
    1198:	c3                   	ret    
    1199:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000011a0 <frame_dummy>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	e9 77 ff ff ff       	jmp    1120 <register_tm_clones>

00000000000011a9 <sumMat>:
    11a9:	f3 0f 1e fa          	endbr64 
    11ad:	55                   	push   %rbp # save %rbp
    11ae:	48 89 e5             	mov    %rsp,%rbp # update %rbp (new stack frame)
    11b1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp) # copy m to 1st param
    11b5:	89 75 e4             	mov    %esi,-0x1c(%rbp) # copy rows to 2nd param
    11b8:	89 55 e0             	mov    %edx,-0x20(%rbp) # copy cols to 3rd param
    11bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp) # copy 0 to total
    11c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp) # copy 0 to i
    11c9:	eb 3d                	jmp    1208 <sumMat+0x5f> # go to 1208
    11cb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp) # copy 0 to j
    11d2:	eb 28                	jmp    11fc <sumMat+0x53> # go to 11fc
    # Handling the matrix
    11d4:	8b 45 f4             	mov    -0xc(%rbp),%eax # copy i tp %eax
    11d7:	0f af 45 e0          	imul   -0x20(%rbp),%eax # multiply i with cols, placed in %eax
    11db:	89 c2                	mov    %eax,%edx # copy i*cols to $edx
    11dd:	8b 45 f8             	mov    -0x8(%rbp),%eax copy j to %eax
    11e0:	01 d0                	add    %edx,%eax # add i*cols with , place in %eax
    11e2:	48 98                	cltq   # convert %eax to 64-bit int for address calculation
    # Compute the correct offset
    11e4:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx # multiply (i*cols+j) by 4 (int offset), put into %rdx
    11eb:	00 
    11ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax # copy m to %rax
    # Calculate the offset of element at (i,j)
    11f0:	48 01 d0             	add    %rdx,%rax # add m to (i*cols+j)*4, put in %rax
    11f3:	8b 00                	mov    (%rax),%eax # dereference m[i*cols+j] and place the value into %eax
    11f5:	01 45 fc             	add    %eax,-0x4(%rbp) # add m[i*cols+j] to total
    11f8:	83 45 f8 01          	addl   $0x1,-0x8(%rbp) # add 1 to j (j++)
    11fc:	8b 45 f8             	mov    -0x8(%rbp),%eax # copy j to %eax
    11ff:	3b 45 e0             	cmp    -0x20(%rbp),%eax # compare j with cols
    1202:	7c d0                	jl     11d4 <sumMat+0x2b> # move back to 11d4 if (j < cols)
    1204:	83 45 f4 01          	addl   $0x1,-0xc(%rbp) # add 1 to i (i++)
    1208:	8b 45 f4             	mov    -0xc(%rbp),%eax # copy i to %eax
    120b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax # compares i with rows
    120e:	7c bb                	jl     11cb <sumMat+0x22> # move back tp 11cb if (i < rows)
    1210:	8b 45 fc             	mov    -0x4(%rbp),%eax # copy total to %eax
    1213:	5d                   	pop    %rbp # clean up stack
    1214:	c3                   	ret    # return total 

0000000000001215 <init>:
    1215:	f3 0f 1e fa          	endbr64 
    1219:	55                   	push   %rbp
    121a:	48 89 e5             	mov    %rsp,%rbp
    121d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1221:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    1228:	eb 41                	jmp    126b <init+0x56>
    122a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1231:	eb 2e                	jmp    1261 <init+0x4c>
    1233:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1236:	8d 14 85 00 00 00 00 	lea    0x0(,%rax,4),%edx
    123d:	8b 45 fc             	mov    -0x4(%rbp),%eax
    1240:	01 d0                	add    %edx,%eax
    1242:	48 98                	cltq   
    1244:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    124b:	00 
    124c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1250:	48 01 d0             	add    %rdx,%rax
    1253:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    1256:	8b 55 fc             	mov    -0x4(%rbp),%edx
    1259:	01 ca                	add    %ecx,%edx
    125b:	89 10                	mov    %edx,(%rax)
    125d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    1261:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
    1265:	7e cc                	jle    1233 <init+0x1e>
    1267:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    126b:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
    126f:	7e b9                	jle    122a <init+0x15>
    1271:	90                   	nop
    1272:	90                   	nop
    1273:	5d                   	pop    %rbp
    1274:	c3                   	ret    

0000000000001275 <main>:
    1275:	f3 0f 1e fa          	endbr64 
    1279:	55                   	push   %rbp
    127a:	48 89 e5             	mov    %rsp,%rbp
    127d:	48 83 ec 10          	sub    $0x10,%rsp
    1281:	bf 30 00 00 00       	mov    $0x30,%edi
    1286:	e8 15 fe ff ff       	call   10a0 <malloc@plt>
    128b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    128f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    1294:	75 19                	jne    12af <main+0x3a>
    1296:	48 8d 05 67 0d 00 00 	lea    0xd67(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    129d:	48 89 c7             	mov    %rax,%rdi
    12a0:	e8 db fd ff ff       	call   1080 <puts@plt>
    12a5:	bf 01 00 00 00       	mov    $0x1,%edi
    12aa:	e8 01 fe ff ff       	call   10b0 <exit@plt>
    12af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    12b3:	48 89 c7             	mov    %rax,%rdi
    12b6:	e8 5a ff ff ff       	call   1215 <init>
    12bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    12c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    12c6:	ba 04 00 00 00       	mov    $0x4,%edx
    12cb:	be 03 00 00 00       	mov    $0x3,%esi
    12d0:	48 89 c7             	mov    %rax,%rdi
    12d3:	e8 d1 fe ff ff       	call   11a9 <sumMat>
    12d8:	89 45 f4             	mov    %eax,-0xc(%rbp)
    12db:	8b 45 f4             	mov    -0xc(%rbp),%eax
    12de:	89 c6                	mov    %eax,%esi
    12e0:	48 8d 05 33 0d 00 00 	lea    0xd33(%rip),%rax        # 201a <_IO_stdin_used+0x1a>
    12e7:	48 89 c7             	mov    %rax,%rdi
    12ea:	b8 00 00 00 00       	mov    $0x0,%eax
    12ef:	e8 9c fd ff ff       	call   1090 <printf@plt>
    12f4:	b8 00 00 00 00       	mov    $0x0,%eax
    12f9:	c9                   	leave  
    12fa:	c3                   	ret    

Disassembly of section .fini:

00000000000012fc <_fini>:
    12fc:	f3 0f 1e fa          	endbr64 
    1300:	48 83 ec 08          	sub    $0x8,%rsp
    1304:	48 83 c4 08          	add    $0x8,%rsp
    1308:	c3                   	ret    
