
locality:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 8a 2f 00 00    	push   0x2f8a(%rip)        # 3fb0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 8b 2f 00 00 	bnd jmp *0x2f8b(%rip)        # 3fb8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop

Disassembly of section .plt.got:

0000000000001060 <__cxa_finalize@plt>:
    1060:	f3 0f 1e fa          	endbr64 
    1064:	f2 ff 25 8d 2f 00 00 	bnd jmp *0x2f8d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    106b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001070 <free@plt>:
    1070:	f3 0f 1e fa          	endbr64 
    1074:	f2 ff 25 45 2f 00 00 	bnd jmp *0x2f45(%rip)        # 3fc0 <free@GLIBC_2.2.5>
    107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001080 <printf@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 3d 2f 00 00 	bnd jmp *0x2f3d(%rip)        # 3fc8 <printf@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001090 <malloc@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 35 2f 00 00 	bnd jmp *0x2f35(%rip)        # 3fd0 <malloc@GLIBC_2.2.5>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010a0 <_start>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	31 ed                	xor    %ebp,%ebp
    10a6:	49 89 d1             	mov    %rdx,%r9
    10a9:	5e                   	pop    %rsi
    10aa:	48 89 e2             	mov    %rsp,%rdx
    10ad:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    10b1:	50                   	push   %rax
    10b2:	54                   	push   %rsp
    10b3:	45 31 c0             	xor    %r8d,%r8d
    10b6:	31 c9                	xor    %ecx,%ecx
    10b8:	48 8d 3d 45 02 00 00 	lea    0x245(%rip),%rdi        # 1304 <main>
    10bf:	ff 15 13 2f 00 00    	call   *0x2f13(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.34>
    10c5:	f4                   	hlt    
    10c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    10cd:	00 00 00 

00000000000010d0 <deregister_tm_clones>:
    10d0:	48 8d 3d 39 2f 00 00 	lea    0x2f39(%rip),%rdi        # 4010 <__TMC_END__>
    10d7:	48 8d 05 32 2f 00 00 	lea    0x2f32(%rip),%rax        # 4010 <__TMC_END__>
    10de:	48 39 f8             	cmp    %rdi,%rax
    10e1:	74 15                	je     10f8 <deregister_tm_clones+0x28>
    10e3:	48 8b 05 f6 2e 00 00 	mov    0x2ef6(%rip),%rax        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    10ea:	48 85 c0             	test   %rax,%rax
    10ed:	74 09                	je     10f8 <deregister_tm_clones+0x28>
    10ef:	ff e0                	jmp    *%rax
    10f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    10f8:	c3                   	ret    
    10f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001100 <register_tm_clones>:
    1100:	48 8d 3d 09 2f 00 00 	lea    0x2f09(%rip),%rdi        # 4010 <__TMC_END__>
    1107:	48 8d 35 02 2f 00 00 	lea    0x2f02(%rip),%rsi        # 4010 <__TMC_END__>
    110e:	48 29 fe             	sub    %rdi,%rsi
    1111:	48 89 f0             	mov    %rsi,%rax
    1114:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1118:	48 c1 f8 03          	sar    $0x3,%rax
    111c:	48 01 c6             	add    %rax,%rsi
    111f:	48 d1 fe             	sar    %rsi
    1122:	74 14                	je     1138 <register_tm_clones+0x38>
    1124:	48 8b 05 c5 2e 00 00 	mov    0x2ec5(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable@Base>
    112b:	48 85 c0             	test   %rax,%rax
    112e:	74 08                	je     1138 <register_tm_clones+0x38>
    1130:	ff e0                	jmp    *%rax
    1132:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1138:	c3                   	ret    
    1139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001140 <__do_global_dtors_aux>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	80 3d c5 2e 00 00 00 	cmpb   $0x0,0x2ec5(%rip)        # 4010 <__TMC_END__>
    114b:	75 2b                	jne    1178 <__do_global_dtors_aux+0x38>
    114d:	55                   	push   %rbp
    114e:	48 83 3d a2 2e 00 00 	cmpq   $0x0,0x2ea2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1155:	00 
    1156:	48 89 e5             	mov    %rsp,%rbp
    1159:	74 0c                	je     1167 <__do_global_dtors_aux+0x27>
    115b:	48 8b 3d a6 2e 00 00 	mov    0x2ea6(%rip),%rdi        # 4008 <__dso_handle>
    1162:	e8 f9 fe ff ff       	call   1060 <__cxa_finalize@plt>
    1167:	e8 64 ff ff ff       	call   10d0 <deregister_tm_clones>
    116c:	c6 05 9d 2e 00 00 01 	movb   $0x1,0x2e9d(%rip)        # 4010 <__TMC_END__>
    1173:	5d                   	pop    %rbp
    1174:	c3                   	ret    
    1175:	0f 1f 00             	nopl   (%rax)
    1178:	c3                   	ret    
    1179:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001180 <frame_dummy>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	e9 77 ff ff ff       	jmp    1100 <register_tm_clones>

0000000000001189 <averageMat_v1>:
    1189:	f3 0f 1e fa          	endbr64 
    118d:	55                   	push   %rbp
    118e:	48 89 e5             	mov    %rsp,%rbp
    1191:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1195:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    1198:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    119f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)      ; OUTER LOOP: Initialize i = 0
    11a6:	eb 41                	jmp    11e9 <averageMat_v1+0x60>
    11a8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)      ; INNER LOOP: Initialize j = 0
    11af:	eb 2c                	jmp    11dd <averageMat_v1+0x54>
    11b1:	8b 45 f4             	mov    -0xc(%rbp),%eax      ; DIFFERENCE: Load i into eax (row index first)
    11b4:	48 98                	cltq   
    11b6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx    ; DIFFERENCE: Calculate row offset (i*8)
    11bd:	00 
    11be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    11c2:	48 01 d0             	add    %rdx,%rax
    11c5:	48 8b 10             	mov    (%rax),%rdx
    11c8:	8b 45 f8             	mov    -0x8(%rbp),%eax      ; DIFFERENCE: Load j into eax (column index second)
    11cb:	48 98                	cltq   
    11cd:	48 c1 e0 02          	shl    $0x2,%rax            ; DIFFERENCE: Calculate column offset (j*4)
    11d1:	48 01 d0             	add    %rdx,%rax
    11d4:	8b 00                	mov    (%rax),%eax          ; Access pattern: arr[i][j]
    11d6:	01 45 fc             	add    %eax,-0x4(%rbp)
    11d9:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)      ; Increment j
    11dd:	8b 45 f8             	mov    -0x8(%rbp),%eax
    11e0:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    11e3:	7c cc                	jl     11b1 <averageMat_v1+0x28>
    11e5:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)      ; Increment i
    11e9:	8b 45 f4             	mov    -0xc(%rbp),%eax
    11ec:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    11ef:	7c b7                	jl     11a8 <averageMat_v1+0x1f>
    11f1:	66 0f ef c0          	pxor   %xmm0,%xmm0
    11f5:	f3 0f 2a 45 fc       	cvtsi2ssl -0x4(%rbp),%xmm0
    11fa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    11fd:	0f af c0             	imul   %eax,%eax
    1200:	66 0f ef c9          	pxor   %xmm1,%xmm1
    1204:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
    1208:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    120c:	5d                   	pop    %rbp
    120d:	c3                   	ret    

000000000000120e <averageMat_v2>:
    120e:	f3 0f 1e fa          	endbr64 
    1212:	55                   	push   %rbp
    1213:	48 89 e5             	mov    %rsp,%rbp
    1216:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    121a:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    121d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    1224:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)      ; OUTER LOOP: Initialize i = 0  
    122b:	eb 41                	jmp    126e <averageMat_v2+0x60>
    122d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)      ; INNER LOOP: Initialize j = 0
    1234:	eb 2c                	jmp    1262 <averageMat_v2+0x54>
    1236:	8b 45 f8             	mov    -0x8(%rbp),%eax      ; DIFFERENCE: Load j into eax (column index first)
    1239:	48 98                	cltq   
    123b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx    ; DIFFERENCE: Calculate row offset (j*8) - wrong! should be column
    1242:	00 
    1243:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1247:	48 01 d0             	add    %rdx,%rax
    124a:	48 8b 10             	mov    (%rax),%rdx
    124d:	8b 45 f4             	mov    -0xc(%rbp),%eax      ; DIFFERENCE: Load i into eax (row index second)
    1250:	48 98                	cltq   
    1252:	48 c1 e0 02          	shl    $0x2,%rax            ; DIFFERENCE: Calculate column offset (i*4) - wrong! should be row
    1256:	48 01 d0             	add    %rdx,%rax
    1259:	8b 00                	mov    (%rax),%eax          ; Access pattern: arr[j][i] - TRANSPOSED!
    125b:	01 45 fc             	add    %eax,-0x4(%rbp)
    125e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)      ; Increment j
    1262:	8b 45 f8             	mov    -0x8(%rbp),%eax
    1265:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    1268:	7c cc                	jl     1236 <averageMat_v2+0x28>
    126a:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)      ; Increment i
    126e:	8b 45 f4             	mov    -0xc(%rbp),%eax
    1271:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    1274:	7c b7                	jl     122d <averageMat_v2+0x1f>
    1276:	66 0f ef c0          	pxor   %xmm0,%xmm0
    127a:	f3 0f 2a 45 fc       	cvtsi2ssl -0x4(%rbp),%xmm0
    127f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
    1282:	0f af c0             	imul   %eax,%eax
    1285:	66 0f ef c9          	pxor   %xmm1,%xmm1
    1289:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
    128d:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    1291:	f3 0f 2c c0          	cvttss2si %xmm0,%eax        ; DIFFERENCE: Convert float to int (different return type)
    1295:	5d                   	pop    %rbp
    1296:	c3                   	ret    

0000000000001297 <initArr>:
    1297:	f3 0f 1e fa          	endbr64 
    129b:	55                   	push   %rbp
    129c:	48 89 e5             	mov    %rsp,%rbp
    129f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    12a3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    12a6:	89 55 e0             	mov    %edx,-0x20(%rbp)
    12a9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    12b0:	eb 46                	jmp    12f8 <initArr+0x61>
    12b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
    12b9:	eb 31                	jmp    12ec <initArr+0x55>
    12bb:	8b 45 f8             	mov    -0x8(%rbp),%eax
    12be:	48 98                	cltq   
    12c0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    12c7:	00 
    12c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    12cc:	48 01 d0             	add    %rdx,%rax
    12cf:	48 8b 10             	mov    (%rax),%rdx
    12d2:	8b 45 fc             	mov    -0x4(%rbp),%eax
    12d5:	48 98                	cltq   
    12d7:	48 c1 e0 02          	shl    $0x2,%rax
    12db:	48 01 d0             	add    %rdx,%rax
    12de:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    12e1:	8b 55 fc             	mov    -0x4(%rbp),%edx
    12e4:	01 ca                	add    %ecx,%edx
    12e6:	89 10                	mov    %edx,(%rax)
    12e8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    12ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
    12ef:	3b 45 e0             	cmp    -0x20(%rbp),%eax
    12f2:	7c c7                	jl     12bb <initArr+0x24>
    12f4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    12f8:	8b 45 f8             	mov    -0x8(%rbp),%eax
    12fb:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
    12fe:	7c b2                	jl     12b2 <initArr+0x1b>
    1300:	90                   	nop
    1301:	90                   	nop
    1302:	5d                   	pop    %rbp
    1303:	c3                   	ret    

0000000000001304 <main>:
    1304:	f3 0f 1e fa          	endbr64 
    1308:	55                   	push   %rbp
    1309:	48 89 e5             	mov    %rsp,%rbp
    130c:	53                   	push   %rbx
    130d:	48 83 ec 18          	sub    $0x18,%rsp
    1311:	bf 18 00 00 00       	mov    $0x18,%edi
    1316:	e8 75 fd ff ff       	call   1090 <malloc@plt>
    131b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    131f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
    1326:	eb 26                	jmp    134e <main+0x4a>
    1328:	8b 45 e0             	mov    -0x20(%rbp),%eax
    132b:	48 98                	cltq   
    132d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    1334:	00 
    1335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
    133d:	bf 0c 00 00 00       	mov    $0xc,%edi
    1342:	e8 49 fd ff ff       	call   1090 <malloc@plt>
    1347:	48 89 03             	mov    %rax,(%rbx)
    134a:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
    134e:	83 7d e0 02          	cmpl   $0x2,-0x20(%rbp)
    1352:	7e d4                	jle    1328 <main+0x24>
    1354:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1358:	ba 03 00 00 00       	mov    $0x3,%edx
    135d:	be 03 00 00 00       	mov    $0x3,%esi
    1362:	48 89 c7             	mov    %rax,%rdi
    1365:	e8 2d ff ff ff       	call   1297 <initArr>
    136a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    136e:	be 03 00 00 00       	mov    $0x3,%esi
    1373:	48 89 c7             	mov    %rax,%rdi
    1376:	e8 0e fe ff ff       	call   1189 <averageMat_v1>
    137b:	66 0f 7e c0          	movd   %xmm0,%eax
    137f:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    1382:	66 0f ef c9          	pxor   %xmm1,%xmm1
    1386:	f3 0f 5a 4d e4       	cvtss2sd -0x1c(%rbp),%xmm1
    138b:	66 48 0f 7e c8       	movq   %xmm1,%rax
    1390:	66 48 0f 6e c0       	movq   %rax,%xmm0
    1395:	48 8d 05 68 0c 00 00 	lea    0xc68(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
    139c:	48 89 c7             	mov    %rax,%rdi
    139f:	b8 01 00 00 00       	mov    $0x1,%eax
    13a4:	e8 d7 fc ff ff       	call   1080 <printf@plt>
    13a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    13ad:	48 89 c7             	mov    %rax,%rdi
    13b0:	e8 bb fc ff ff       	call   1070 <free@plt>
    13b5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    13bc:	00 
    13bd:	b8 00 00 00 00       	mov    $0x0,%eax
    13c2:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    13c6:	c9                   	leave  
    13c7:	c3                   	ret    

Disassembly of section .fini:

00000000000013c8 <_fini>:
    13c8:	f3 0f 1e fa          	endbr64 
    13cc:	48 83 ec 08          	sub    $0x8,%rsp
    13d0:	48 83 c4 08          	add    $0x8,%rsp
    13d4:	c3                   	ret    
